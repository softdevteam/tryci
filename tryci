#! /bin/sh

# Script to emulate a CI job run on buildbot servers
#
# Each Dockerfile with the fliename prefix `.buildbot_dockerfile_` is tested
# and the return status of this script is the number of images that failed
# (thus 0 indicating success).
#
# If no docker files are found, then a default, minimal image is used, and a
# script named `.buildbot.sh` is run inside the resulting container.
#
# It is assumed that the user invoking this script has permissions to use
# docker. On Linux this means the user must be in the `docker` group.


# Arguments to enable PT and rr support in docker.
CAP_ARGS="--cap-add CAP_PERFMON --cap-add SYS_PTRACE --security-opt seccomp=unconfined"

TRYCI_BUILD_CTXT="."
TRYCI_REMOTE_CLONE_DEPTH=100 # This is the same as on our CI server
TRYCI_DOCKERFILES=""
TRYCI_DEFAULT_SCRIPT=".buildbot.sh"
TRYCI_DOCKERFILE_BASE=.buildbot_dockerfile_
TRYCI_DEFAULT_DOCKERFILE=${TRYCI_DOCKERFILE_BASE}default
TRYCI_BUILD_PREFIX=""

set -e

usage() {
    cat <<EOF
Runs a soft-dev CI job.
Must be run from the same directory as the job's .buildbot.sh file.

usage: tryci [-h] [-c <ref>] [-m <mount>...] [-p] [-r <server-name>]

Options:
  -c, --checkout <ref>
      Run a CI job from a clone of <ref> instead of the working tree. Valid
      formats:
      - Branch name (e.g., main, feature/x)
      - Commit hash (e.g., a1b2c3d)
      - Tag (e.g., v1.0.0)
      - Remote-tracking branch (e.g., origin/main)
      - Remote URL with branch (e.g., https://github.com/user/repo#branch)
      Useful for debugging the exact version of a CI job that failed on CI.

  -m, --mount <mount> [<mount> ...]
      Specify one or more bind-mounts. Each <mount> should be in the form:
        <host-path>:<container-path>[:ro|rw]
      You can specify multiple bind-mounts by repeating the option or by
      providing a comma-separated list:
        -m /src:/dst -m /foo:/bar:ro
        -m /src:/dst,/foo:/bar:ro

  -p, --post-mortem
      Attach a shell to the image to prod around if the build fails.

  -r, --remote <server-name>
      Specify the server <server-name> to run the CI job on over SSH.
      Useful if you want to test on a remote CI environment.

  -s, --script <path>
      Run the CI script at <path> instead of the default '.buildbot.sh'. This
      is especially useful with '-c/--checkout', which by default uses the
      '.buildbot.sh' from the specified git reference. Use this option if you
      want to test a different or updated CI script, for example to pinpoint
      when a bug was introduced.

  -h, --help
      Show this help message and exit.
EOF
}

error() { printf "\e[31m[ERROR]\e[0m %s\n" "$1" >&2; }

cleanup() {
    if [[ -n "$tmpdir" && -d "$tmpdir" ]]; then
        rm -rf -- "$tmpdir"
    fi
}

trap cleanup EXIT

resolve_build_ctxt() {
    # When we pass -c/--checkout <ref> we want the build context to be a clone
    # of <ref>. There isn't really a nice way to do this in docker so this
    # function resolves the build context depending on the contents of <ref>.

    # First, the simple case: no '--checkout <ref>' option was used. We keep
    # the default build context as the current working directory and generate a
    # best-guess image prefix in the format: local-<pwd>:dirty.
    if [ -z "$ref" ]; then
        if [ -z $script ] && [ ! -f ${TRYCI_DEFAULT_SCRIPT} ]; then
            error "${TRYCI_DEFAULT_SCRIPT} not found in directory: $pwd".
            exit 1
        else
            TRYCI_BUILD_PREFIX="local-$(basename $(pwd)):dirty"
            return
        fi
    fi

    # Second, some --checkout <ref> was provided. If we get here we can't
    # simply use the working tree anymore. We need to find out what <ref> is,
    # clone it into a tmpdir, and set that as our build context.

    tmpdir=$(mktemp -d) # removed with a cleanup trap on EXIT.
    TRYCI_BUILD_CTXT="$tmpdir"

    if [[ "$ref" =~ ^(https?|git|ssh):// ]] || [[ "$ref" =~ ^[^/]+@[^:]+: ]]; then
        # <ref> is a remote repo. We'll need to extract any branch/commit/tag
        # that may have been provided. For example, if passed:
        #
        #    '--checkout https://github.com/ykjit/yk#trying'
        #
        # We must extract 'trying' and ensure our clone is checked out on that
        # branch.
        local base_url="${ref%%#*}"
        local tag=$([[ "$base_url" != "$ref" ]] && echo "${ref#*#}")

        if [ -n "$tag" ]; then
            git clone --no-checkout --depth="$TRYCI_REMOTE_CLONE_DEPTH" "$base_url" "$tmpdir"
            # FIXME: this can fail if the requested commit hash is deeper than
            # TRYCI_REMOTE_CLONE_DEPTH.
            git -C "$tmpdir" checkout "$tag"
        else
            git clone --depth="$TRYCI_REMOTE_CLONE_DEPTH" "$base_url" "$tmpdir"
        fi

        if [ -z $script ] && [ ! -f "$TRYCI_BUILD_CTXT/$TRYCI_DEFAULT_SCRIPT" ]; then
            error "${TRYCI_DEFAULT_SCRIPT} not found in ${ref}."
        fi

        # For the image tag, transform URLs like `https://github.com/user/repo`
        # into `github.com_user_repo`.
        local prefix=$(echo $base_url | \
            sed -E 's/https:\/\/|git:\/\/(.*)/\1/g' | \
            tr '/' '_' | \
            sed -E 's/_$//')
    else
        # Finally, <ref> is branch/tag/commit of the local repo. This is a bit
        # trickier because we want to ensure that any checkout only hits refs
        # in our local git cache and never tries to pull from remote.
        local prefix="local-$(basename $(pwd))"
        local tag=$ref
        if git rev-parse --verify --quiet "$ref" >/dev/null; then
            # Before we waste time doing anything, lets check if a CI build
            # script even exists at the given ref.
            if ! git cat-file -e $ref:$TRYCI_DEFAULT_SCRIPT 2>/dev/null; then
                error "CI script '$TRYCI_DEFAULT_SCRIPT' does not exist at revision: $ref"
                exit 1
            fi

            git clone --no-checkout . "$tmpdir"

            # This is the important part. By copying the refs and modules over
            # from the working tree, we ensure that any subsequent `git
            # submodule --init` call is either a no-op or checks out an older
            # commit that we already have downloaded. It will never have to
            # clone from the remote.
            cp -r .git/refs "$tmpdir/.git/"
            cp -r .git/modules "$tmpdir/.git/"
            cp .git/config "$tmpdir/.git/config"

            # Finally, we checkout out the desired ref.
            git -C "$tmpdir" checkout "$ref"
        else
            echo "$ref does not exist locally. Please fetch first if you need it."
            exit 1
        fi
    fi

    if [ ! -z $script ]; then
        cp "$script" "$tmpdir"
    fi

    # This is important for projects like 'alloy' and 'yk' because we
    # deliberatly did not clone recursively.
    git -C "$tmpdir" submodule update --progress --init --recursive

    if [[ "$tag" =~ ^[0-9a-fA-F]{6,40}$ ]]; then
        # If <ref> contained a commit hash, we must shorten it to the first 6
        # chars because docker tags have a strict length limit.
        tag="${tag:0:6}"
    fi
    TRYCI_BUILD_PREFIX="$prefix${tag:+":$tag"}"
}

build_image() {
    local dockerfile="$TRYCI_BUILD_CTXT/$1"
    local tmp_dockerfile=$(mktemp)

    if [ -n "$script" ]; then
        sed '$c\CMD ["sh", "-x", "'"$(basename "$script")"'"]' "$dockerfile" > "$tmp_dockerfile"
    else
        cp "$dockerfile" "$tmp_dockerfile"
    fi

    # Extract the dockerfile suffix. E.g. for '.buildbot_dockerfile_myrepo'
    # it's 'myrepo'.
    local suffix=$(echo "$1" | sed -e "s/^${TRYCI_DOCKERFILE_BASE}//")

    # Create a unique image tag so that old docker image builds can be reused.
    image_tag=${LOGNAME}-${TRYCI_BUILD_PREFIX}-${suffix}
    ci_uid=`id -u`

    docker build \
      --build-arg CI_UID="${ci_uid}" \
      --build-arg CI_RUNNER=tryci \
      -t "${image_tag}" \
      --file "${tmp_dockerfile}" \
      "${TRYCI_BUILD_CTXT}"

    container_tag=$(docker create \
      ${CAP_ARGS} \
      -u "${ci_uid}" \
      ${volumes} \
      "${image_tag}")
}

run_image() {
    docker start -a ${container_tag}
    status=$?

    if [ ${pm} -eq 1 -a ${status} -ne 0 ]; then
        echo "=================== [ CI Job failure ] =================="
        echo "Setting up a login shell for post-mortem..."

        post_mortem_tag="${image_tag}-post-mortem"
        docker commit ${container_tag} ${post_mortem_tag} &> /dev/null
        echo "You can now prod around inside the image."
        echo "Type \"exit\" to detach and remove the image."
        echo "(note that you will be root)"
        docker run ${CAP_ARGS} -ti --entrypoint=/bin/bash -u root ${post_mortem_tag}
        echo "=================== [ CI Job failure ] =================="
    elif [ ${pm} -eq 0 -a ${status} -ne 0 ]; then
        echo "=================== [CI Job failure ] =================="
        echo "To prod around inside the image, re-run this script with the --post-mortem flag."
        echo "(note that you will be root)"
        echo "========================================================="
    fi

    return ${status}
}

pm=0
server=""
ref=""
volumes="-v /opt/ykllvm_cache:/opt/ykllvm_cache:ro"
script=""

while [ $# -gt 0 ]; do
  case $1 in
    -p | --post-mortem)
      pm=1
      shift
      ;;
    -r | --remote)
      server="$2"
      shift 2
      ;;
    -c | --checkout)
      ref="$2"
      shift 2
      ;;
    -m | --mounts)
      # Support both repeated and comma-separated mounts
      shift
      if [[ -z "$1" || "$1" =~ ^- ]]; then
        error "--mounts requires an argument."
        exit 1
      fi

      IFS=',' read -ra mounts <<< "$1"
      for m in "${mounts[@]}"; do
        if [[ ! "$m" =~ ^[^:]+:[^:]+(:ro|:rw)?$ ]]; then
          error "Invalid bind mount: '$m'"
          error "Expected format: /host/path:/container/path[:ro|rw]"
          exit 1
        fi
        volumes+=" -v $m"
      done
      shift
      ;;
    -s | --script)
      script="$2"
      shift 2
      ;;
    -h | --help)
      usage
      exit 0
      ;;
    *)
      usage
      exit 1
      ;;
  esac
done

if [ ! docker buildx version &>/dev/null ] && [ -z ${server} ]; then
    error "Docker Buildx is not installed or not available in your PATH".
    error "For installation instructions, visit: https://docs.docker.com/buildx/working-with-buildx/"
    exit 1
fi

if [ ! -z $script ] && [ ! -f $script ]; then
    error "File not found: $script"
    exit 1
fi

if [ ! -z ${server} ]; then
    export DOCKER_HOST="ssh://${server}"
fi

# Start by getting the build context for this CI job.
resolve_build_ctxt

TRYCI_DOCKERFILES=$(
  find "$TRYCI_BUILD_CTXT" \
    -name "$TRYCI_DOCKERFILE_BASE*" \
    -maxdepth 1 \
    -type f \
    -exec basename {} \; \
    2>/dev/null
)

# If the repo doesn't define any images, then use the default image.
if [ "${TRYCI_DOCKERFILES}" = "" ]; then
    cat << EOF > ${TRYCI_DEFAULT_DOCKERFILE}
    FROM debian:bullseye
    ARG CI_UID
    RUN useradd -m -u \${CI_UID} ci
    RUN apt-get update && \
        apt-get -y install build-essential curl procps file
    WORKDIR /ci
    RUN chown \${CI_UID}:\${CI_UID} .
    COPY --chown=\${CI_UID}:\${CI_UID} . .
    CMD sh -x ${TRYCI_DEFAULT_SCRIPT}
EOF
    TRYCI_DOCKERFILES=${TRYCI_DEFAULT_DOCKERFILE}
fi

# Sequentially run the images.
#
# XXX: In the future we might decide to run the images in parallel, but we'd
# have to think about how to format the logs. We might also investigate having
# buildbot run separate jobs in parallel.
num_failed=0
failed_dockerfiles=""
for dockerfile in ${TRYCI_DOCKERFILES}; do
    echo "CI> Running ${dockerfile}..."
    rc=0
    build_image ${dockerfile}
    run_image $container_tag || rc=$?
    if [ $rc -eq 0 ]; then
        echo "CI> ${dockerfile}: [ OK ]"
    else
        echo "CI> ${dockerfile}: [ FAIL ]"
        failed_dockerfiles="${failed_dockerfiles} ${dockerfile}"
        num_failed=$((${num_failed} + 1))
    fi
done

if [ ${num_failed} -ne 0 ]; then
    echo "CI> Failed images:${failed_dockerfiles}"
fi

exit $num_failed
